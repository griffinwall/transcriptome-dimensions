ylab("PSL Score") + xlab("Month") + ggtitle(i) +
theme(legend.position = "right")
print(p)
}
for (i in ids) {
p = ggplot(data=melt.psl[PUBLIC_ID==i,],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",aes(linetype=variable)) +
geom_point(size=4,aes(color=fish)) +
ylim(rng) +
scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(i) +
theme(legend.position = "right")
print(p)
}
# Install and load required R packages
library(dplyr)
library(data.table)
library(ggplot2)
library(MASS)
library(survivalAnalysis)
library(sva)
library(gridExtra)
load(file = params$data) # load processed data
gene.load = read.csv(file = params$gene_loadings) %>% data.table()# dimension gene loadings
pca.score = read.csv(file = params$score) %>% data.table() # dimension values
load(file = "rdata/mod.clinical-risk.rdata") # baseline clinical risk models
load(file = "rdata/mod.disease-course.rdata") # baseline surival
eps = exp_time[gene_name %in% gene.load$GENE_NAME] %>% dplyr::select("gene_name",contains("MMRF"))  # Select genes in dimensions
gene = data.table(aggregate(. ~ gene_name, data = eps, FUN = sum)) # Aggregate transcript counts to gene_name counts
remove.samples = gene[,-"gene_name"][,lapply(.SD,function(x)sum(x<100)/length(gene.load$GENE_NAME))] %>% # For each sample, find proportion of genes with <100 reads
select_if(. > 0.1) %>% colnames() # List samples with > 10% of genes with < 100 counts
print(paste0(length(remove.samples)," sample(s) had <100 reads in > 10% of high-quality genes with and was removed. Sample(s) removed: ",remove.samples))
qc.counts = exp_time[gene_name %in% gene.load$GENE_NAME] %>% # Select keep genes
dplyr::select(-seqid,-gene_id,-gene_biotype,-all_of(remove.samples)) # Remove extra gene annotation and poor coverage samples
qc.melt <- data.table::melt(qc.counts, # transform format
id.vars=c("gene_name","name_n_transcripts","transcript_id","length"),
variable.name="SEQ_ID",
value.name="count")
rm(qc.counts,eps,gene,remove.samples) # cleanup variables
qc.melt[,total_raw_counts:=sum(count),by=c('SEQ_ID','gene_name')] # Find total counts per sample per gene
qc.melt[,kb_length:=length/1000] # Find length of gene in kilo-bases
final.dt = qc.melt[,list(cpk=sum((count+1/name_n_transcripts)/kb_length)), # Find counts per gene length
by=c('SEQ_ID','gene_name','total_raw_counts')] # For each sample and gene pair
final.dt[,size_factor:=median(cpk),by='SEQ_ID'] # Find size factor = median counts/gene length
final.dt[,cpkmed:=cpk/size_factor] # Normalize by size factor
final.dt[,logcpkmed:=log2(cpkmed)] # Log2 transform
final.dt[,mean:=mean(logcpkmed),by='gene_name'] # Find mean of normalized gene counts per gene
final.dt[,sd:=sd(logcpkmed),by='gene_name'] # Find standard deviation of normalized counts per gene
final.dt[,adjlogcpkmed:=logcpkmed] # New variable to adjust
final.dt[(logcpkmed-mean)/sd>=5,adjlogcpkmed:=mean+5*sd] # Truncate values > 5 SD
final.dt[(logcpkmed-mean)/sd<= -5,adjlogcpkmed:=mean-5*sd] # Truncate values < 5 SD
norm <- list("melt"=final.dt)
norm.dt <- dcast(norm$melt, SEQ_ID ~ gene_name, value.var='adjlogcpkmed') # Sample x gene
rm(final.dt,norm) # cleanup variables
vr = c("SEQ_ID","batch","D_PT_age","D_PT_gender","ttcos","censos","ttcpfs","censpfs","ttctf1","censtf1")
cin_vr = clinical %>% dplyr::select(all_of(vr))
dt = merge(cin_vr,norm.dt,by="SEQ_ID")
# SETUP VARIABLES
DAT = dt %>% dplyr::select(-all_of(vr)) %>% t() # Expression only and gene x sample format
colnames(DAT) = dt$SEQ_ID # Annotate samples to DAT
BATCH = as.numeric(dt$batch)
MOD = dt %>% dplyr::select(all_of(vr[3:10])) %>% data.matrix() # Co-variate model
# RUN COMBAT
cbat = ComBat(dat = DAT, batch = BATCH, mod = MOD)
cbat.dt = data.table(t(cbat)) # Sample x gene data table
cbat.dt$SEQ_ID = colnames(cbat) # Annotate sample ids
rm(vr,cin_vr,dt,DAT,BATCH,MOD,cbat) # Cleanup variables
dim_time = cbind(cbat.dt[,"SEQ_ID"],scale(data.matrix(cbat.dt[,-"SEQ_ID"]),center=gene.load$CENTER_MEAN,scale = FALSE) %*% data.matrix(gene.load[,-c("GENE_NAME","CENTER_MEAN")]))
# Note, dimension values in baseline samples are slightly different as batch correction included a different sample set
pca.sd = apply(pca.score[,-"SEQ_ID"],2,sd) # find standard deviation of original MM dimensions
tme.sd = cbind(dim_time[,"SEQ_ID"],data.matrix(dim_time[,-"SEQ_ID"]) %*% diag(1/pca.sd)) # divide by SD
colnames(tme.sd) = c("SEQ_ID",paste(colnames(dim_time[,-"SEQ_ID"]),"_SD",sep = ""))
theme_set(theme_classic() + theme(axis.title=element_text(size=9), axis.text=element_text(size=8),
legend.title=element_text(size=9), legend.text=element_text(size=8)))
# merge with clinical data
dt = merge(
clinical[,c("SEQ_ID","PUBLIC_ID","COLLECTION_REASON","VJ_INTERVAL", # TODO: add time in days variable
"D_TRI_CF_ABNORMALITYPR11","D_TRI_CF_ABNORMALITYPR8",
"D_TRI_CF_ABNORMALITYPR13","D_TRI_CF_ABNORMALITYPR3",
"D_TRI_CF_ABNORMALITYPR6","D_TRI_CF_1PAMPLIFICATI2",
"D_TRI_CF_T1416ABNORMAL","D_PT_iss","ttcos","censos")],
tme.sd,by="SEQ_ID")
# find samples with multiple timepoints
count.dt = as.data.frame(table(dt$PUBLIC_ID))
ids = droplevels(count.dt[count.dt$Freq>2,]$Var1)
# select samples with multiple timepoints
pdt = dt[PUBLIC_ID%in%ids]
# change timepoint to months
#pdt$VJ_INTERVAL
pdt$Month = c(0,9,15,0,66,78,0,12,27,0,21,24,33,54,0,3,9,0,30,45,51,0,21,30,0,30,36,0,12,21,30,0,9,15,0,27,30)
pdt[,c('VJ_INTERVAL',"Month")]
fit = mod.risk$d17p # D_TRI_CF_ABNORMALITYPR11
fit.coeff = summary(fit)$coeff[-1,] %>% data.table()
pdt[,d17p:= rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(fit.coeff$Estimate)) + summary(fit)$coeff[1,1]]
fit = mod.risk$t1416 # D_TRI_CF_ABNORMALITYPR8
fit.coeff = summary(fit)$coeff[-1,] %>% data.table()
pdt[,t1416:= rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(fit.coeff$Estimate)) + summary(fit)$coeff[1,1]]
fit = mod.risk$a1q # D_TRI_CF_ABNORMALITYPR13
fit.coeff = summary(fit)$coeff[-1,] %>% data.table()
pdt[,a1q:= rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(fit.coeff$Estimate)) + summary(fit)$coeff[1,1]]
fit = mod.risk$t414 # D_TRI_CF_ABNORMALITYPR3
fit.coeff = summary(fit)$coeff[-1,] %>% data.table()
pdt[,t414:= rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(fit.coeff$Estimate)) + summary(fit)$coeff[1,1]]
fit = mod.risk$t1114 # D_TRI_CF_ABNORMALITYPR6
fit.coeff = summary(fit)$coeff[-1,] %>% data.table()
pdt[,t1114:= rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(fit.coeff$Estimate)) + summary(fit)$coeff[1,1]]
fit = mod.risk$iss # ISS
pdt[,iss:= rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(coef(fit)))]
fit = mod.risk$iss # OS
pdt[,iss:= rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(coef(fit)))]
pdt
melt.psl = melt(pdt[,c("PUBLIC_ID","Month","d17p","t1416","a1q","t414","t1114","iss")],id.vars = c("PUBLIC_ID","Month"))
melt.psl$fish = as.character(NA)
melt.psl[variable=="d17p","fish"] = pdt$D_TRI_CF_ABNORMALITYPR11
melt.psl[variable=="t1416","fish"] = pdt$D_TRI_CF_ABNORMALITYPR8
melt.psl[variable=="a1q","fish"] = pdt$D_TRI_CF_ABNORMALITYPR13
melt.psl[variable=="t414","fish"] = pdt$D_TRI_CF_ABNORMALITYPR3
melt.psl[variable=="t1114","fish"] = pdt$D_TRI_CF_ABNORMALITYPR6
melt.psl[fish == "Not Done","fish"] = ""
melt.psl
for (i in ids) {
p = ggplot(data=melt.psl[PUBLIC_ID==i,],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",aes(linetype=variable)) +
geom_point(size=4,aes(color=fish)) +
ylim(rng) + xlim(c(0,80)) +
scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(i) +
theme(legend.position = "right")
print(p)
}
for (i in ids) {
p = ggplot(data=melt.psl[PUBLIC_ID==i,],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",aes(linetype=variable)) +
geom_point(size=4,aes(color=fish)) +
xlim(c(0,80)) +
scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(i) +
theme(legend.position = "right")
print(p)
}
for (i in ids) {
p = ggplot(data=melt.psl[PUBLIC_ID==i & variable!="iss",],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",aes(linetype=variable)) +
geom_point(size=4,aes(color=fish)) +
xlim(c(0,80)) +
scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(i) +
theme(legend.position = "right")
print(p)
}
for (i in ids) {
p = ggplot(data=melt.psl[PUBLIC_ID==i & variable!="iss",],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",aes(linetype=variable)) +
geom_point(size=4,aes(color=fish)) +
ylim(c(-5,5)) + xlim(c(0,80)) +
scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(i) +
theme(legend.position = "right")
print(p)
}
for (i in ids) {
p = ggplot(data=melt.psl[PUBLIC_ID==i & variable!="iss",],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",aes(linetype=variable)) +
geom_point(size=4,aes(color=fish)) +
ylim(c(-5.5,5)) + xlim(c(0,80)) +
scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(i) +
theme(legend.position = "right")
print(p)
}
for (i in ids) {
p = ggplot(data=melt.psl[PUBLIC_ID==i & variable!="iss",],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",aes(linetype=variable)) +
geom_point(size=4,aes(color=fish)) +
xlim(c(0,80)) +
scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(i) +
theme(legend.position = "right")
print(p)
}
for (i in ids) {
p = ggplot(data=melt.psl[PUBLIC_ID==i & variable!="iss",],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",aes(linetype=variable)) +
geom_point(size=4,aes(color=fish)) +
ylim(c(-6.5,5)) + xlim(c(0,80)) +
scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(i) +
theme(legend.position = "right")
print(p)
}
for (i in ids) {
p = ggplot(data=melt.psl[PUBLIC_ID==i & variable!="iss",],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",aes(linetype=variable)) +
geom_point(size=4,aes(color=fish)) +
ylim(c(-7,5)) + xlim(c(0,80)) +
scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(i) +
theme(legend.position = "right")
print(p)
}
View(melt.psl)
for (i in ids) {
p = ggplot(data=melt.psl[PUBLIC_ID==i & variable!="iss",],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",aes(linetype=variable)) +
geom_point(size=4,aes(color=fish)) +
ylim(c(-7.5,5)) + xlim(c(0,80)) +
scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(i) +
theme(legend.position = "right")
print(p)
}
# setup
theme_set(theme_classic() + theme(axis.title=element_text(size=9), axis.text=element_text(size=8),
legend.title=element_text(size=9), legend.text=element_text(size=8)))
p1 = ggplot(data=dt.psl,aes(x=month,y=d17p)) +
geom_line(size=1,color="gray") +
geom_point(size=4,aes(color=D_TRI_CF_ABNORMALITYPR11)) +
scale_color_manual(values = c("gray","black"), name = "d(17p)", labels = c("NA", "No")) +
ylab("d(17p) PSL Score") +
theme(legend.position = "top")
# Install and load required R packages
library(dplyr)
library(data.table)
library(ggplot2)
library(MASS)
library(survivalAnalysis)
library(sva)
library(gridExtra)
load(file = params$data) # load processed data
gene.load = read.csv(file = params$gene_loadings) %>% data.table()# dimension gene loadings
pca.score = read.csv(file = params$score) %>% data.table() # dimension values
load(file = "rdata/mod.clinical-risk.rdata") # baseline clinical risk models
load(file = "rdata/mod.disease-course.rdata") # baseline surival
eps = exp_time[gene_name %in% gene.load$GENE_NAME] %>% dplyr::select("gene_name",contains("MMRF"))  # Select genes in dimensions
gene = data.table(aggregate(. ~ gene_name, data = eps, FUN = sum)) # Aggregate transcript counts to gene_name counts
remove.samples = gene[,-"gene_name"][,lapply(.SD,function(x)sum(x<100)/length(gene.load$GENE_NAME))] %>% # For each sample, find proportion of genes with <100 reads
select_if(. > 0.1) %>% colnames() # List samples with > 10% of genes with < 100 counts
print(paste0(length(remove.samples)," sample(s) had <100 reads in > 10% of high-quality genes with and was removed. Sample(s) removed: ",remove.samples))
qc.counts = exp_time[gene_name %in% gene.load$GENE_NAME] %>% # Select keep genes
dplyr::select(-seqid,-gene_id,-gene_biotype,-all_of(remove.samples)) # Remove extra gene annotation and poor coverage samples
qc.melt <- data.table::melt(qc.counts, # transform format
id.vars=c("gene_name","name_n_transcripts","transcript_id","length"),
variable.name="SEQ_ID",
value.name="count")
rm(qc.counts,eps,gene,remove.samples) # cleanup variables
qc.melt[,total_raw_counts:=sum(count),by=c('SEQ_ID','gene_name')] # Find total counts per sample per gene
qc.melt[,kb_length:=length/1000] # Find length of gene in kilo-bases
final.dt = qc.melt[,list(cpk=sum((count+1/name_n_transcripts)/kb_length)), # Find counts per gene length
by=c('SEQ_ID','gene_name','total_raw_counts')] # For each sample and gene pair
final.dt[,size_factor:=median(cpk),by='SEQ_ID'] # Find size factor = median counts/gene length
final.dt[,cpkmed:=cpk/size_factor] # Normalize by size factor
final.dt[,logcpkmed:=log2(cpkmed)] # Log2 transform
final.dt[,mean:=mean(logcpkmed),by='gene_name'] # Find mean of normalized gene counts per gene
final.dt[,sd:=sd(logcpkmed),by='gene_name'] # Find standard deviation of normalized counts per gene
final.dt[,adjlogcpkmed:=logcpkmed] # New variable to adjust
final.dt[(logcpkmed-mean)/sd>=5,adjlogcpkmed:=mean+5*sd] # Truncate values > 5 SD
final.dt[(logcpkmed-mean)/sd<= -5,adjlogcpkmed:=mean-5*sd] # Truncate values < 5 SD
norm <- list("melt"=final.dt)
norm.dt <- dcast(norm$melt, SEQ_ID ~ gene_name, value.var='adjlogcpkmed') # Sample x gene
rm(final.dt,norm) # cleanup variables
vr = c("SEQ_ID","batch","D_PT_age","D_PT_gender","ttcos","censos","ttcpfs","censpfs","ttctf1","censtf1")
cin_vr = clinical %>% dplyr::select(all_of(vr))
dt = merge(cin_vr,norm.dt,by="SEQ_ID")
# SETUP VARIABLES
DAT = dt %>% dplyr::select(-all_of(vr)) %>% t() # Expression only and gene x sample format
colnames(DAT) = dt$SEQ_ID # Annotate samples to DAT
BATCH = as.numeric(dt$batch)
MOD = dt %>% dplyr::select(all_of(vr[3:10])) %>% data.matrix() # Co-variate model
# RUN COMBAT
cbat = ComBat(dat = DAT, batch = BATCH, mod = MOD)
cbat.dt = data.table(t(cbat)) # Sample x gene data table
cbat.dt$SEQ_ID = colnames(cbat) # Annotate sample ids
rm(vr,cin_vr,dt,DAT,BATCH,MOD,cbat) # Cleanup variables
dim_time = cbind(cbat.dt[,"SEQ_ID"],scale(data.matrix(cbat.dt[,-"SEQ_ID"]),center=gene.load$CENTER_MEAN,scale = FALSE) %*% data.matrix(gene.load[,-c("GENE_NAME","CENTER_MEAN")]))
# Note, dimension values in baseline samples are slightly different as batch correction included a different sample set
pca.sd = apply(pca.score[,-"SEQ_ID"],2,sd) # find standard deviation of original MM dimensions
tme.sd = cbind(dim_time[,"SEQ_ID"],data.matrix(dim_time[,-"SEQ_ID"]) %*% diag(1/pca.sd)) # divide by SD
colnames(tme.sd) = c("SEQ_ID",paste(colnames(dim_time[,-"SEQ_ID"]),"_SD",sep = ""))
theme_set(theme_classic() + theme(axis.title=element_text(size=9), axis.text=element_text(size=8),
legend.title=element_text(size=9), legend.text=element_text(size=8)))
# merge with clinical data
dt = merge(
clinical[,c("SEQ_ID","PUBLIC_ID","COLLECTION_REASON","VJ_INTERVAL", # TODO: add time in days variable
"D_TRI_CF_ABNORMALITYPR11","D_TRI_CF_ABNORMALITYPR8",
"D_TRI_CF_ABNORMALITYPR13","D_TRI_CF_ABNORMALITYPR3",
"D_TRI_CF_ABNORMALITYPR6","D_TRI_CF_1PAMPLIFICATI2",
"D_TRI_CF_T1416ABNORMAL","D_PT_iss","ttcos","censos")],
tme.sd,by="SEQ_ID")
# find samples with multiple timepoints
count.dt = as.data.frame(table(dt$PUBLIC_ID))
ids = droplevels(count.dt[count.dt$Freq>2,]$Var1)
# select samples with multiple timepoints
pdt = dt[PUBLIC_ID%in%ids]
# change timepoint to months
#pdt$VJ_INTERVAL
pdt$Month = c(0,9,15,0,66,78,0,12,27,0,21,24,33,54,0,3,9,0,30,45,51,0,21,30,0,30,36,0,12,21,30,0,9,15,0,27,30)
pdt[,c('VJ_INTERVAL',"Month")]
fit = mod.risk$d17p # D_TRI_CF_ABNORMALITYPR11
fit.coeff = summary(fit)$coeff[-1,] %>% data.table()
pdt[,d17p:= rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(fit.coeff$Estimate)) + summary(fit)$coeff[1,1]]
fit = mod.risk$t1416 # D_TRI_CF_ABNORMALITYPR8
fit.coeff = summary(fit)$coeff[-1,] %>% data.table()
pdt[,t1416:= rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(fit.coeff$Estimate)) + summary(fit)$coeff[1,1]]
fit = mod.risk$a1q # D_TRI_CF_ABNORMALITYPR13
fit.coeff = summary(fit)$coeff[-1,] %>% data.table()
pdt[,a1q:= rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(fit.coeff$Estimate)) + summary(fit)$coeff[1,1]]
fit = mod.risk$t414 # D_TRI_CF_ABNORMALITYPR3
fit.coeff = summary(fit)$coeff[-1,] %>% data.table()
pdt[,t414:= rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(fit.coeff$Estimate)) + summary(fit)$coeff[1,1]]
fit = mod.risk$t1114 # D_TRI_CF_ABNORMALITYPR6
fit.coeff = summary(fit)$coeff[-1,] %>% data.table()
pdt[,t1114:= rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(fit.coeff$Estimate)) + summary(fit)$coeff[1,1]]
fit = mod.risk$iss # ISS
pdt[,iss:= rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(coef(fit)))]
fit = mod.risk$iss # OS
pdt[,iss:= rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(coef(fit)))]
pdt
melt.psl = melt(pdt[,c("PUBLIC_ID","Month","d17p","t1416","a1q","t414","t1114","iss")],id.vars = c("PUBLIC_ID","Month"))
melt.psl$fish = as.character(NA)
melt.psl[variable=="d17p","fish"] = pdt$D_TRI_CF_ABNORMALITYPR11
melt.psl[variable=="t1416","fish"] = pdt$D_TRI_CF_ABNORMALITYPR8
melt.psl[variable=="a1q","fish"] = pdt$D_TRI_CF_ABNORMALITYPR13
melt.psl[variable=="t414","fish"] = pdt$D_TRI_CF_ABNORMALITYPR3
melt.psl[variable=="t1114","fish"] = pdt$D_TRI_CF_ABNORMALITYPR6
melt.psl[fish == "Not Done","fish"] = ""
melt.psl
for (i in ids) {
p = ggplot(data=melt.psl[PUBLIC_ID==i & variable!="iss",],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",aes(linetype=variable)) +
geom_point(size=4,aes(color=fish)) +
ylim(c(-7.5,5)) + xlim(c(0,80)) +
scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(i) +
theme(legend.position = "right")
print(p)
}
melt.iss = melt(pdt[,c("PUBLIC_ID","Month","iss")],id.vars = c("PUBLIC_ID","Month"))
rng = c(min(mod.risk$iss$lp),max(mod.risk$iss$lp))
for (i in ids) {
p = ggplot(data=melt.iss[PUBLIC_ID==i,],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",linetype=2) +
geom_point(size=4) +
ylim(rng) +
ylim(rng) + xlim(c(0,80)) +
#scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
#scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(paste("ISS",i)) +
theme(legend.position = "right")
print(p)
}
ggplot(data=melt.iss,aes(x=Month,y=value,color=PUBLIC_ID)) +
geom_line(size=1,linetype=2) +
geom_point(size=4) +
ylim(rng) + xlim(c(0,80)) +
ylab("PSL Score") + xlab("Month") + ggtitle("ISS") +
theme(legend.position = "right")
pdt$os_psl = rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(os$coxph$coef))
rng = c(min(os$coxph$linear.predictors),max(os$coxph$linear.predictors))
melt.os = melt(pdt[,c("PUBLIC_ID","Month","os_psl","ttcos","censos")],id.vars = c("PUBLIC_ID","Month","ttcos","censos"))
melt.os$tdy = melt.os$Month/12*365.25
melt.os$smt = round(melt.os$ttcos*0.0328767)
melt.os$censos = as.factor(melt.os$censos)
for (i in ids) {
p = ggplot(data=melt.os[PUBLIC_ID==i,],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",linetype=2) +
geom_point(size=4) +
ylim(rng) + xlim(c(0,80)) +
geom_vline(aes(xintercept = smt), color = "red", size=1) +
ylab("PSL Score") + xlab("Month") + ggtitle(paste("Overall Survival",i)) +
theme(legend.position = "right")
print(p)
}
ggplot(data=melt.os,aes(x=Month,y=value,color=PUBLIC_ID)) +
geom_line(size=1,linetype=2) +
geom_point(size=4) +
ylim(rng) + xlim(c(0,80)) +
geom_vline(aes(xintercept = smt,color=PUBLIC_ID,linetype=censos), size=1) +
ylab("PSL Score") + xlab("Month") + ggtitle("Overall Survival") +
theme(legend.position = "right")
out = data.frame(SEQ_ID=character(),
variable=factor(),
value=numeric(),
perc=numeric())
for (i in seq_along(ids)){
data = dt.melt[SEQ_ID==ids[i]]
tot = sum(abs(data$value))
data$perc = abs(data$value)/tot
out = rbind(out,data)
}
pdf(file = "over-time-plots.pdf")
for (i in ids) {
p = ggplot(data=melt.psl[PUBLIC_ID==i & variable!="iss",],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",aes(linetype=variable)) +
geom_point(size=4,aes(color=fish)) +
ylim(c(-7.5,5)) + xlim(c(0,80)) +
scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(i) +
theme(legend.position = "right")
print(p)
}
melt.iss = melt(pdt[,c("PUBLIC_ID","Month","iss")],id.vars = c("PUBLIC_ID","Month"))
rng = c(min(mod.risk$iss$lp),max(mod.risk$iss$lp))
ggplot(data=melt.iss,aes(x=Month,y=value,color=PUBLIC_ID)) +
geom_line(size=1,linetype=2) +
geom_point(size=4) +
ylim(rng) + xlim(c(0,80)) +
ylab("PSL Score") + xlab("Month") + ggtitle("ISS") +
theme(legend.position = "right")
for (i in ids) {
p = ggplot(data=melt.iss[PUBLIC_ID==i,],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",linetype=2) +
geom_point(size=4) +
ylim(rng) + xlim(c(0,80)) +
#scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
#scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(paste("ISS",i)) +
theme(legend.position = "right")
print(p)
}
pdt$os_psl = rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(os$coxph$coef))
rng = c(min(os$coxph$linear.predictors),max(os$coxph$linear.predictors))
melt.os = melt(pdt[,c("PUBLIC_ID","Month","os_psl","ttcos","censos")],id.vars = c("PUBLIC_ID","Month","ttcos","censos"))
melt.os$tdy = melt.os$Month/12*365.25
melt.os$smt = round(melt.os$ttcos*0.0328767)
melt.os$censos = as.factor(melt.os$censos)
ggplot(data=melt.os,aes(x=Month,y=value,color=PUBLIC_ID)) +
geom_line(size=1,linetype=2) +
geom_point(size=4) +
ylim(rng) + xlim(c(0,80)) +
geom_vline(aes(xintercept = smt,color=PUBLIC_ID,linetype=censos), size=1) +
ylab("PSL Score") + xlab("Month") + ggtitle("Overall Survival") +
theme(legend.position = "right")
for (i in ids) {
p = ggplot(data=melt.os[PUBLIC_ID==i,],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",linetype=2) +
geom_point(size=4) +
ylim(rng) + xlim(c(0,80)) +
geom_vline(aes(xintercept = smt), color = "red", size=1) +
ylab("PSL Score") + xlab("Month") + ggtitle(paste("Overall Survival",i)) +
theme(legend.position = "right")
print(p)
}
dev.off()
pdf(file = "over-time-plots.pdf")
for (i in ids) {
p = ggplot(data=melt.psl[PUBLIC_ID==i & variable!="iss",],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",aes(linetype=variable)) +
geom_point(size=4,aes(color=fish)) +
ylim(c(-7.5,5)) + xlim(c(0,80)) +
scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(i) +
theme(legend.position = "right")
print(p)
}
# ISS over time
melt.iss = melt(pdt[,c("PUBLIC_ID","Month","iss")],id.vars = c("PUBLIC_ID","Month"))
rng = c(min(mod.risk$iss$lp),max(mod.risk$iss$lp))
ggplot(data=melt.iss,aes(x=Month,y=value,color=PUBLIC_ID)) +
geom_line(size=1,linetype=2) +
geom_point(size=4) +
ylim(rng) + xlim(c(0,80)) +
ylab("PSL Score") + xlab("Month") + ggtitle("ISS") +
theme(legend.position = "right")
for (i in ids) {
p = ggplot(data=melt.iss[PUBLIC_ID==i,],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",linetype=2) +
geom_point(size=4) +
ylim(rng) + xlim(c(0,80)) +
#scale_color_manual(values = c("gray","black","red"), name = "Tumor Change", labels = c("NA", "No","Yes")) +
#scale_linetype_manual(values = c(2,3,4,5,6), name = "", labels = c("d(17p)","t(14;16)","a(1q)","t(4;14)","t(11;14)")) +
ylab("PSL Score") + xlab("Month") + ggtitle(paste("ISS",i)) +
theme(legend.position = "right")
print(p)
}
# 2.2.2. Overall Survival
pdt$os_psl = rowSums(data.matrix(pdt %>% dplyr::select(starts_with("PC"))) %*% diag(os$coxph$coef))
rng = c(min(os$coxph$linear.predictors),max(os$coxph$linear.predictors))
melt.os = melt(pdt[,c("PUBLIC_ID","Month","os_psl","ttcos","censos")],id.vars = c("PUBLIC_ID","Month","ttcos","censos"))
melt.os$tdy = melt.os$Month/12*365.25
melt.os$smt = round(melt.os$ttcos*0.0328767)
melt.os$censos = as.factor(melt.os$censos)
ggplot(data=melt.os,aes(x=Month,y=value,color=PUBLIC_ID)) +
geom_line(size=1,linetype=2) +
geom_point(size=4) +
ylim(rng) + xlim(c(0,80)) +
geom_vline(aes(xintercept = smt,color=PUBLIC_ID,linetype=censos), size=1) +
ylab("PSL Score") + xlab("Month") + ggtitle("Overall Survival") +
theme(legend.position = "right")
for (i in ids) {
p = ggplot(data=melt.os[PUBLIC_ID==i,],aes(x=Month,y=value,group=variable)) +
geom_line(size=1,color="gray",linetype=2) +
geom_point(size=4) +
ylim(rng) + xlim(c(0,80)) +
geom_vline(aes(xintercept = smt), color = "red", size=1) +
ylab("PSL Score") + xlab("Month") + ggtitle(paste("Overall Survival",i)) +
theme(legend.position = "right")
print(p)
}
dev.off()
