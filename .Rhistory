# Install and load required R packages
library(dplyr)
library(data.table)
library(ggplot2)
library(MASS)
library(survivalAnalysis)
load(file = params$data) # load processed data
clinical %>% group_by(D_PT_race) %>% count()
merge(clinical,score_sd) %>% group_by(D_PT_race) %>% count()
merge(clinical,score_sd,by="SEQ_ID") %>% group_by(D_PT_race) %>% count()
merge(clinical,score_sd,by="SEQ_ID") %>% nrow()
merge(clinical,score_sd,by="SEQ_ID") %>% group_by(D_PT_race) %>% count()
merge(clinical,score_sd,by="SEQ_ID") %>% group_by(D_PT_ethnic) %>% count() # count by ethnic
# Install and load required R packages
library("data.table")
library("dplyr")
library("knitr")
library("ggplot2")
setwd("C:/Users/rosal/github/transcriptome-dimensions/notebook/")
setwd("C:/Users/rosal/github/transcriptome-dimensions/")
load(file = "rdata/mod.clinical-risk.rdata") # generated in clinical-risk.Rmd
load(file = "rdata/mod.demographic-risk.rdata") # generated in demographic-risk.Rmd
load(file = "rdata/mod.disease-course.rdata") # generated in disease-course.Rmd
psl = rowSums(data.matrix(os$data[,-c(1:2)]) %*% diag(coef(os$coxph))) # multiple each PC by the PC beta, sum across PCs
# check PSL calculation
unique(round(os$coxph$linear.predictors,12) == round(psl,12))
# split into decile
dcl = cut(psl,quantile(psl,c(0,1/10,2/10,3/10,4/10,5/10,6/10,7/10,8/10,9/10,1)),include.lowest = T,labels = F)
dat = data.table(os$data[,c(1:2)],psl=psl,decile=dcl)
dat$category = if_else(dat$ttcos<=1000 & dat$censos==1,"dead",if_else(dat$ttcos>1000,"alive","censored")) # at 1000 days, describe in patient has died, is alive, or was censored before 1000 days
dat
# plot distribution
ggplot(dat) + geom_dotplot(aes(x=psl,fill=category),binwidth = 1/10,color="white") + theme_classic()
# count number in each category by decile
tmp1 = dat %>% filter(category=="dead") %>% group_by(decile) %>% count(category,name = "n_dead")
tmp2 = dat %>% filter(category=="alive") %>% group_by(decile) %>% count(category,name = "n_alive")
tmp3 = dat %>% filter(category=="censored") %>% group_by(decile) %>% count(category,name="n_censored")
dat %>% filter(censos==1) %>% # average days to death per decile - ignore censored values
events = dat %>% filter(censos==1) %>% group_by(decile) %>% count(censos,name="n_events") # number of events per decile
tmp3 = dat %>% filter(category=="censored") %>% group_by(decile) %>% count(category,name="n_censored")
dat %>% filter(censos==1) %>% # average days to death per decile - ignore censored values
events = dat %>% filter(censos==1) %>% group_by(decile) %>% count(censos,name="n_events") # number of events per decile
dat %>% filter(censos==1)
dat %>% filter(censos==1) %>% group_by(decile)
dat %>% filter(censos==1) %>% group_by(decile) %>% count(censos,name="n_events")
dat %>% filter(censos==1) %>% # average days to death per decile - ignore censored values
dat %>% group_by(decile) %>% count(censos,name="n_events") # number of events per decile
dat %>% filter(censos==1) %>% # average days to death per decile - ignore censored values
dat %>% group_by(decile) %>% count(censos,name="n_events") # number of events per decile
dat %>% group_by(decile) %>% count(censos,name="n_events")
dat %>% filter(censos==1) %>% # average days to death per decile - ignore censored values
dat %>% filter(censos==1) %>% group_by(decile) %>% count(censos,name="n_events") # number of events per decile
dat %>% filter(censos==1) %>% # average days to death per decile - ignore censored values
evts = dat %>% filter(censos==1) %>% group_by(decile) %>% count(censos,name="n_events") # number of events per decile
tmp3 = dat %>% filter(category=="censored") %>% group_by(decile) %>% count(category,name="n_censored")
#dat %>% filter(censos==1) %>% # average days to death per decile - ignore censored values
evts = dat %>% filter(censos==1) %>% group_by(decile) %>% count(censos,name="n_events") # number of events per decile
evts
dat %>% filter(censos==0) %>% group_by(decile) %>% average(censos,name="n_events") # average days to death per decile - ignore censored values
dat %>% filter(censos==0) %>% group_by(decile) %>% mean(censos,name="n_events") # average days to death per decile - ignore censored values
dat %>% filter(censos==0) %>% group_by(decile) %>% count(censos,name="n_events") # average days to death per decile - ignore censored values
dat %>% filter(censos==0) %>% group_by(decile) %>% aggregate(., mean) # average days to death per decile - ignore censored values
dat %>% filter(censos==0) %>% group_by(decile) %>% summarise_at(vars = ttcos,funs = mean) # average days to death per decile - ignore censored values
dat %>% filter(censos==0) %>% group_by(decile) %>% summarise_at(vars = ttcos,funs = mean) # average days to death per decile - ignore censored values
dat %>% filter(censos==0) %>% group_by(decile) %>% summarise_at(.vars = ttcos,.funs = mean) # average days to death per decile - ignore censored values
dat %>% filter(censos==0) %>% group_by(decile) %>% summarise_at(vars(ttcos),funs(mean)) # average days to death per decile - ignore censored values
dat %>% filter(censos==0) %>% group_by(decile) %>% summarise_at(vars(ttcos),mean) # average days to death per decile - ignore censored values
evts = dat %>% filter() %>% group_by(decile) %>% count(censos,name="n_events") # number of events per decile
dat %>% filter(censos==1) %>% group_by(decile) %>% summarise_at(vars(ttcos),mean) # average days to death per decile - ignore censored values
evts
evts = dat %>% filter(censos==1) %>% group_by(decile) %>% count(censos,name="n_events") # number of events per decile
evts
dat %>% filter(censos==1) %>% group_by(decile) %>% summarise_at(vars(ttcos),mean) # average days to death per decile - ignore censored values
dat %>% filter() %>% group_by(decile) %>% summarise_at(vars(ttcos),mean) # average days to death per decile - ignore censored values
avg_c1 = dat %>% filter(censos==1) %>% group_by(decile) %>% summarise_at(vars(ttcos),mean)
avg_c0 = dat %>% filter(censos==0) %>% group_by(decile) %>% summarise_at(vars(ttcos),mean)
evts = dat %>% filter(censos==1) %>% group_by(decile) %>% count(censos,name="n_events") # number of events per decile
c2 - data.table(merge(merge(avg_all,avg_c0),merge(avg_c1,evts)))
c2 = data.table(merge(merge(avg_all,avg_c0),merge(avg_c1,evts)))
avg_all = dat %>% filter() %>% group_by(decile) %>% summarise_at(vars(ttcos),mean) # average days to death per decile - ignore censored values
avg_c1 = dat %>% filter(censos==1) %>% group_by(decile) %>% summarise_at(vars(ttcos),mean)
avg_c0 = dat %>% filter(censos==0) %>% group_by(decile) %>% summarise_at(vars(ttcos),mean)
evts = dat %>% filter(censos==1) %>% group_by(decile) %>% count(censos,name="n_events") # number of events per decile
c2 = data.table(merge(merge(avg_all,avg_c0),merge(avg_c1,evts)))
c2
c2 = data.table(merge(merge(avg_all,avg_c0,by = "decile"),merge(avg_c1,evts,by="decile")))
c2
evts = dat %>% filter(censos==1) %>% group_by(decile) %>% count(censos,name="n_events") %>% select("decile","n_events") # number of events per decile
evts = dat %>% filter(censos==1) %>% group_by(decile) %>% count(censos,name="n_events") %>% select("decile","n_events") # number of events per decile
evts = dat %>% filter(censos==1) %>% group_by(decile) %>% count(censos,name="n_events") %>% select(-"censos") # number of events per decile
c2 = data.table(merge(merge(avg_all,avg_c0,by = "decile"),merge(avg_c1,evts,by="decile"))) %>% select(-"censos")
c2 = data.table(merge(merge(avg_all,avg_c0,by = "decile"),merge(avg_c1,evts,by="decile")))[,-"censos"]
c2
colnames(c2) = c("decile","avg_days","avg_days_dead","avg_days_censored","events")
kable(merge(cnt,c2,by="decile"),align = 'c',caption = "Overall Surival PSL decile counts at 1000 days") # remove censored before 1000 days
psl = rowSums(data.matrix(os$data[,-c(1:2)]) %*% diag(coef(os$coxph))) # multiple each PC by the PC beta, sum across PCs
# check PSL calculation
unique(round(os$coxph$linear.predictors,12) == round(psl,12))
#data.table(psl,os$coxph$linear.predictors)
# split into decile
dcl = cut(psl,quantile(psl,c(0,1/10,2/10,3/10,4/10,5/10,6/10,7/10,8/10,9/10,1)),include.lowest = T,labels = F)
dat = data.table(os$data[,c(1:2)],psl=psl,decile=dcl)
dat$category = if_else(dat$ttcos<=1000 & dat$censos==1,"dead",if_else(dat$ttcos>1000,"alive","censored")) # at 1000 days, describe in patient has died, is alive, or was censored before 1000 days
dat
# plot distribution
ggplot(dat) + geom_dotplot(aes(x=psl,fill=category),binwidth = 1/10,color="white") + theme_classic()
# count number in each category by decile
tmp1 = dat %>% filter(category=="dead") %>% group_by(decile) %>% count(category,name = "n_dead")
tmp2 = dat %>% filter(category=="alive") %>% group_by(decile) %>% count(category,name = "n_alive")
tmp3 = dat %>% filter(category=="censored") %>% group_by(decile) %>% count(category,name="n_censored")
cnt = data.table(merge(merge(tmp1,tmp2,by=c("decile"),all = T),tmp3,by="decile",all=T) %>% select("decile","n_dead","n_alive","n_censored"))
cnt = data.table(merge(merge(tmp1,tmp2,by=c("decile"),all = T),tmp3,by="decile",all=T)[,c("decile","n_1","n_2","n_3")]
fit = mod.risk$iss
# Install and load required R packages
library("data.table")
library("dplyr")
library("knitr")
library("ggplot2")
fit = mod.risk$iss
psl = rowSums(data.matrix(fit$model[,-1]) %*% diag(coef(fit))) # multiple each PC by the PC beta, sum across PCs
# check PSL calculation
unique(round(fit$lp,12) == round(psl,12))
#data.table(psl,fit$lp)
# split into deciles
dcl = cut(psl,quantile(psl,c(0,1/10,2/10,3/10,4/10,5/10,6/10,7/10,8/10,9/10,1)),include.lowest = T,labels = F)
dat = data.table(category=fit$model$ISS,psl=psl,decile=dcl)
# plot distribution
ggplot(dat) + geom_dotplot(aes(x=psl,fill=category),binwidth = 1/10,color="white") + theme_classic()
# count number in each category by decile
tmp1 = dat %>% filter(category==1) %>% group_by(decile) %>% count(category,name = "n_1")
tmp2 = dat %>% filter(category==2) %>% group_by(decile) %>% count(category,name = "n_2")
tmp3 = dat %>% filter(category==3) %>% group_by(decile) %>% count(category,name = "n_3")
cnt = data.table(merge(merge(tmp1,tmp2,by=c("decile"),all = T),tmp3,by="decile",all=T))[,c("decile","n_1","n_2","n_3")]
kable(cnt,align = 'c',caption = "ISS PSL decile counts")
# calculate hazards ratios
a = cnt[decile%in%c(10),n_3]
b = cnt[decile%in%c(10),n_1]
c = sum(cnt[decile%in%c(5,6),n_3])
d = sum(cnt[decile%in%c(5,6),n_1])
hr10 = (a/b)/(c/d)
se10 = sqrt((1/a)+(1/b)+(1/c)+(1/d))
ci10_l = exp(log(hr10)-1.96*se10)
ci10_u = exp(log(hr10)+1.96*se10)
paste0("Odds Ratio: ISS PSL in decile 10 compared with deciles 5 + 6 for stage 1 v 3 = ",round(hr10,digits = 2)," (",round(ci10_l,digits = 2),"-",round(ci10_u,digits = 2),")")
psl = rowSums(data.matrix(os$data[,-c(1:2)]) %*% diag(coef(os$coxph))) # multiple each PC by the PC beta, sum across PCs
# check PSL calculation
unique(round(os$coxph$linear.predictors,12) == round(psl,12))
#data.table(psl,os$coxph$linear.predictors)
# split into decile
dcl = cut(psl,quantile(psl,c(0,1/10,2/10,3/10,4/10,5/10,6/10,7/10,8/10,9/10,1)),include.lowest = T,labels = F)
dat = data.table(os$data[,c(1:2)],psl=psl,decile=dcl)
dat$category = if_else(dat$ttcos<=1000 & dat$censos==1,"dead",if_else(dat$ttcos>1000,"alive","censored")) # at 1000 days, describe in patient has died, is alive, or was censored before 1000 days
dat
# plot distribution
ggplot(dat) + geom_dotplot(aes(x=psl,fill=category),binwidth = 1/10,color="white") + theme_classic()
# count number in each category by decile
tmp1 = dat %>% filter(category=="dead") %>% group_by(decile) %>% count(category,name = "n_dead")
tmp2 = dat %>% filter(category=="alive") %>% group_by(decile) %>% count(category,name = "n_alive")
tmp3 = dat %>% filter(category=="censored") %>% group_by(decile) %>% count(category,name="n_censored")
cnt = data.table(merge(merge(tmp1,tmp2,by=c("decile"),all = T),tmp3,by="decile",all=T) %>% select("decile","n_dead","n_alive","n_censored"))
psl = rowSums(data.matrix(os$data[,-c(1:2)]) %*% diag(coef(os$coxph))) # multiple each PC by the PC beta, sum across PCs
# check PSL calculation
unique(round(os$coxph$linear.predictors,12) == round(psl,12))
#data.table(psl,os$coxph$linear.predictors)
# split into decile
dcl = cut(psl,quantile(psl,c(0,1/10,2/10,3/10,4/10,5/10,6/10,7/10,8/10,9/10,1)),include.lowest = T,labels = F)
dat = data.table(os$data[,c(1:2)],psl=psl,decile=dcl)
dat$category = if_else(dat$ttcos<=1000 & dat$censos==1,"dead",if_else(dat$ttcos>1000,"alive","censored")) # at 1000 days, describe in patient has died, is alive, or was censored before 1000 days
dat
# plot distribution
ggplot(dat) + geom_dotplot(aes(x=psl,fill=category),binwidth = 1/10,color="white") + theme_classic()
# count number in each category by decile
tmp1 = dat %>% filter(category=="dead") %>% group_by(decile) %>% count(category,name = "n_dead")
tmp2 = dat %>% filter(category=="alive") %>% group_by(decile) %>% count(category,name = "n_alive")
tmp3 = dat %>% filter(category=="censored") %>% group_by(decile) %>% count(category,name="n_censored")
cnt = data.table(merge(merge(tmp1,tmp2,by=c("decile"),all = T),tmp3,by="decile",all=T)) %>% select("decile","n_dead","n_alive","n_censored")
cnt = data.table(merge(merge(tmp1,tmp2,by=c("decile"),all = T),tmp3,by="decile",all=T))[,c("decile","n_dead","n_alive","n_censored")]
psl = rowSums(data.matrix(os$data[,-c(1:2)]) %*% diag(coef(os$coxph))) # multiple each PC by the PC beta, sum across PCs
# check PSL calculation
unique(round(os$coxph$linear.predictors,12) == round(psl,12))
#data.table(psl,os$coxph$linear.predictors)
# split into decile
dcl = cut(psl,quantile(psl,c(0,1/10,2/10,3/10,4/10,5/10,6/10,7/10,8/10,9/10,1)),include.lowest = T,labels = F)
dat = data.table(os$data[,c(1:2)],psl=psl,decile=dcl)
dat$category = if_else(dat$ttcos<=1000 & dat$censos==1,"dead",if_else(dat$ttcos>1000,"alive","censored")) # at 1000 days, describe in patient has died, is alive, or was censored before 1000 days
dat
# plot distribution
ggplot(dat) + geom_dotplot(aes(x=psl,fill=category),binwidth = 1/10,color="white") + theme_classic()
# count number in each category by decile
tmp1 = dat %>% filter(category=="dead") %>% group_by(decile) %>% count(category,name = "n_dead")
tmp2 = dat %>% filter(category=="alive") %>% group_by(decile) %>% count(category,name = "n_alive")
tmp3 = dat %>% filter(category=="censored") %>% group_by(decile) %>% count(category,name="n_censored")
cnt = data.table(merge(merge(tmp1,tmp2,by=c("decile"),all = T),tmp3,by="decile",all=T))[,c("decile","n_dead","n_alive","n_censored")]
avg_all = dat %>% filter() %>% group_by(decile) %>% summarise_at(vars(ttcos),mean) # average days to death per decile - ignore censored values
avg_c1 = dat %>% filter(censos==1) %>% group_by(decile) %>% summarise_at(vars(ttcos),mean)
avg_c0 = dat %>% filter(censos==0) %>% group_by(decile) %>% summarise_at(vars(ttcos),mean)
evts = dat %>% filter(censos==1) %>% group_by(decile) %>% count(censos,name="n_events")  # number of events per decile
c2 = data.table(merge(merge(avg_all,avg_c0,by = "decile"),merge(avg_c1,evts,by="decile")))[,-"censos"]
colnames(c2) = c("decile","avg_days","avg_days_dead","avg_days_censored","events")
kable(merge(cnt,c2,by="decile"),align = 'c',caption = "Overall Surival PSL decile counts at 1000 days") # remove censored before 1000 days
# calculate hazards ratios
a = cnt[decile%in%c(10),n_dead]
b = cnt[decile%in%c(10),n_alive]
c = sum(cnt[decile%in%c(5,6),n_dead])
d = sum(cnt[decile%in%c(5,6),n_alive])
hr10 = (a/b)/(c/d)
se10 = sqrt((1/a)+(1/b)+(1/c)+(1/d))
ci10_l = exp(log(hr10)-1.96*se10)
ci10_u = exp(log(hr10)+1.96*se10)
paste0("HR OS PSL decile 10 compared with deciles 5 + 6 at 1000 days = ",round(hr10,digits = 2)," (",round(ci10_l,digits = 2),"-",round(ci10_u,digits = 2),")")
psl = rowSums(data.matrix(os$data[,-c(1:2)]) %*% diag(coef(os$coxph))) # multiple each PC by the PC beta, sum across PCs
# check PSL calculation
unique(round(os$coxph$linear.predictors,12) == round(psl,12))
#data.table(psl,os$coxph$linear.predictors)
# split into decile
dcl = cut(psl,quantile(psl,c(0,1/10,2/10,3/10,4/10,5/10,6/10,7/10,8/10,9/10,1)),include.lowest = T,labels = F)
dat = data.table(os$data[,c(1:2)],psl=psl,decile=dcl)
dat$category = if_else(dat$ttcos<=1000 & dat$censos==1,"dead",if_else(dat$ttcos>1000,"alive","censored")) # at 1000 days, describe in patient has died, is alive, or was censored before 1000 days
dat
# plot distribution
ggplot(dat) + geom_dotplot(aes(x=psl,fill=category),binwidth = 1/10,color="white") + theme_classic()
# count number in each category by decile
tmp1 = dat %>% filter(category=="dead") %>% group_by(decile) %>% count(category,name = "n_dead")
tmp2 = dat %>% filter(category=="alive") %>% group_by(decile) %>% count(category,name = "n_alive")
tmp3 = dat %>% filter(category=="censored") %>% group_by(decile) %>% count(category,name="n_censored")
cnt = data.table(merge(merge(tmp1,tmp2,by=c("decile"),all = T),tmp3,by="decile",all=T))[,c("decile","n_dead","n_alive","n_censored")]
avg_all = dat %>% filter() %>% group_by(decile) %>% summarise_at(vars(ttcos),mean) # average days to death per decile - ignore censored values
avg_c1 = dat %>% filter(censos==1) %>% group_by(decile) %>% summarise_at(vars(ttcos),mean)
avg_c0 = dat %>% filter(censos==0) %>% group_by(decile) %>% summarise_at(vars(ttcos),mean)
evts = dat %>% filter(censos==1) %>% group_by(decile) %>% count(censos,name="n_events")  # number of events per decile
c2 = data.table(merge(merge(avg_all,avg_c0,by = "decile"),merge(avg_c1,evts,by="decile")))[,-"censos"]
colnames(c2) = c("decile","avg_days","avg_days_censored","avg_days_dead","events")
kable(merge(cnt,c2,by="decile"),align = 'c',caption = "Overall Surival PSL decile counts at 1000 days") # remove censored before 1000 days
# calculate hazards ratios
a = cnt[decile%in%c(10),n_dead]
b = cnt[decile%in%c(10),n_alive]
c = sum(cnt[decile%in%c(5,6),n_dead])
d = sum(cnt[decile%in%c(5,6),n_alive])
hr10 = (a/b)/(c/d)
se10 = sqrt((1/a)+(1/b)+(1/c)+(1/d))
ci10_l = exp(log(hr10)-1.96*se10)
ci10_u = exp(log(hr10)+1.96*se10)
paste0("HR OS PSL decile 10 compared with deciles 5 + 6 at 1000 days = ",round(hr10,digits = 2)," (",round(ci10_l,digits = 2),"-",round(ci10_u,digits = 2),")")
tf1_psl = rowSums(data.matrix(tf1$data[,-c(1:2)]) %*% diag(coef(tf1$coxph))) # multiple each PC by the PC beta, sum across PCs
# check PSL calculation
unique(round(tf1$coxph$linear.predictors,12) == round(tf1_psl,12))
#data.table(tf1_psl,tf1$coxph$linear.predictors)
# split into decile
dcl = cut(psl,quantile(psl,c(0,1/10,2/10,3/10,4/10,5/10,6/10,7/10,8/10,9/10,1)),include.lowest = T,labels = F)
dat = data.table(tf1$data[,c(1:2)],psl=psl,decile=dcl)
dat$category = if_else(dat$ttctf1<=1000 & dat$censtf1==1,"fail",if_else(dat$ttctf1>1000,"okay","censored")) # at 1000 days, describe if treatment has failed, not failed, or patient data censored before 1000 days
dat
# plot distribution
ggplot(dat) + geom_dotplot(aes(x=psl,fill=category),binwidth = 1/10,color="white") + theme_classic()
# count number in each category by decile
tmp1 = dat %>% filter(category=="fail") %>% group_by(decile) %>% count(category,name = "n_fail")
tmp2 = dat %>% filter(category=="okay") %>% group_by(decile) %>% count(category,name = "n_okay")
tmp3 = dat %>% filter(category=="censored") %>% group_by(decile) %>% count(category,name="n_censored")
cnt = data.table(merge(merge(tmp1,tmp2,by=c("decile"),all = T),tmp3,by="decile",all=T) %>% select("decile","n_fail","n_okay","n_censored"))
tf1_psl = rowSums(data.matrix(tf1$data[,-c(1:2)]) %*% diag(coef(tf1$coxph))) # multiple each PC by the PC beta, sum across PCs
# check PSL calculation
unique(round(tf1$coxph$linear.predictors,12) == round(tf1_psl,12))
#data.table(tf1_psl,tf1$coxph$linear.predictors)
# split into decile
dcl = cut(psl,quantile(psl,c(0,1/10,2/10,3/10,4/10,5/10,6/10,7/10,8/10,9/10,1)),include.lowest = T,labels = F)
dat = data.table(tf1$data[,c(1:2)],psl=psl,decile=dcl)
dat$category = if_else(dat$ttctf1<=1000 & dat$censtf1==1,"fail",if_else(dat$ttctf1>1000,"okay","censored")) # at 1000 days, describe if treatment has failed, not failed, or patient data censored before 1000 days
dat
# plot distribution
ggplot(dat) + geom_dotplot(aes(x=psl,fill=category),binwidth = 1/10,color="white") + theme_classic()
# count number in each category by decile
tmp1 = dat %>% filter(category=="fail") %>% group_by(decile) %>% count(category,name = "n_fail")
tmp2 = dat %>% filter(category=="okay") %>% group_by(decile) %>% count(category,name = "n_okay")
tmp3 = dat %>% filter(category=="censored") %>% group_by(decile) %>% count(category,name="n_censored")
cnt = data.table(merge(merge(tmp1,tmp2,by=c("decile"),all = T),tmp3,by="decile",all=T))[,c("decile","n_fail","n_okay","n_censored")]
avg_all = dat %>% filter() %>% group_by(decile) %>% summarise_at(vars(ttctf1),mean) # average days to death per decile - ignore censored values
avg_c1 = dat %>% filter(censtf1==1) %>% group_by(decile) %>% summarise_at(vars(ttctf1),mean)
avg_c0 = dat %>% filter(censtf1==0) %>% group_by(decile) %>% summarise_at(vars(ttctf1),mean)
evts = dat %>% filter(censtf1==1) %>% group_by(decile) %>% count(censtf1,name="n_events")  # number of events per decile
c2 = data.table(merge(merge(avg_all,avg_c0,by = "decile"),merge(avg_c1,evts,by="decile")))[,-"censtf1"]
colnames(c2) = c("decile","avg_days","avg_days_censored","avg_days_dead","events")
kable(merge(cnt,c2,by="decile"),align = 'c',caption = "Time to first treatment fail PSL decile counts at 1000 days") # remove censored before 1000 days
# calculate hazards ratios
a = cnt[decile%in%c(10),n_fail]
b = cnt[decile%in%c(10),n_okay]
c = sum(cnt[decile%in%c(5,6),n_fail])
d = sum(cnt[decile%in%c(5,6),n_okay])
hr10 = (a/b)/(c/d)
se10 = sqrt((1/a)+(1/b)+(1/c)+(1/d))
ci10_l = exp(log(hr10)-1.96*se10)
ci10_u = exp(log(hr10)+1.96*se10)
paste0("HR TTF PSL decile 10 compared with deciles 5 + 6 at 1000 days = ",round(hr10,digits = 2)," (",round(ci10_l,digits = 2),"-",round(ci10_u,digits = 2),")")
fit = lm.age
psl = rowSums(data.matrix(fit$model[,-1]) %*% diag(coef(fit)[-1])) + coef(fit)[1] # multiple each PC by the PC beta, sum across PCs, add the intercept beta
# check PSL calculation
unique(round(fit$fitted.values,10) == round(psl,10))
#data.table(PSL=psl,fitted_values=fit$fitted.values) # view data table
# split into decile
dcl = cut(psl,quantile(psl,c(0,1/10,2/10,3/10,4/10,5/10,6/10,7/10,8/10,9/10,1)),include.lowest = T,labels = F)
dat = data.table(age=fit$model$D_PT_age,psl=psl,decile=dcl)
dat$category = as.factor(if_else(dat$age<60,1,2)) # two categories: <60 or >=60 at diagnosis
# plot distribution
ggplot(dat) + geom_dotplot(aes(x=psl,fill=category),binwidth = 1/2,color="white") + theme_classic()
# count number in each category by decile
tmp1 = dat %>% filter(category=="1") %>% group_by(decile) %>% count(category,name = "n_1")
tmp2 = dat %>% filter(category=="2") %>% group_by(decile) %>% count(category,name = "n_2")
avg = dat %>% filter() %>% group_by(decile) %>% summarise_at(vars(age),mean) # average days to death per decile - ignore censored values
cnt = data.table(merge(merge(tmp1,tmp2,by=c("decile"),all = T),avg,by="decile"))[,c("decile","n_1","n_2","age")]
kable(cnt,align = 'c',caption = "Age PSL decile counts")
# calculate hazards ratios
a = cnt[decile%in%c(1),n_1]
b = cnt[decile%in%c(1),n_2]
c = sum(cnt[decile%in%c(5,6),n_1])
d = sum(cnt[decile%in%c(5,6),n_2])
hr10 = (a/b)/(c/d)
se10 = sqrt((1/a)+(1/b)+(1/c)+(1/d))
ci10_l = exp(log(hr10)-1.96*se10)
ci10_u = exp(log(hr10)+1.96*se10)
paste0("Odds Ratio: Age PSL in decile 1 compared with deciles 5 + 6 for <60 or >=60 = ",round(hr10,digits = 2)," (",round(ci10_l,digits = 2),"-",round(ci10_u,digits = 2),")")
fit = lm.age
psl = rowSums(data.matrix(fit$model[,-1]) %*% diag(coef(fit)[-1])) + coef(fit)[1] # multiple each PC by the PC beta, sum across PCs, add the intercept beta
# check PSL calculation
unique(round(fit$fitted.values,10) == round(psl,10))
#data.table(PSL=psl,fitted_values=fit$fitted.values) # view data table
# split into decile
dcl = cut(psl,quantile(psl,c(0,1/10,2/10,3/10,4/10,5/10,6/10,7/10,8/10,9/10,1)),include.lowest = T,labels = F)
dat = data.table(age=fit$model$D_PT_age,psl=psl,decile=dcl)
dat$category = as.factor(if_else(dat$age<60,1,2)) # two categories: <60 or >=60 at diagnosis
# plot distribution
ggplot(dat) + geom_dotplot(aes(x=psl,fill=category),binwidth = 1/2,color="white") + theme_classic()
# count number in each category by decile
tmp1 = dat %>% filter(category=="1") %>% group_by(decile) %>% count(category,name = "n_lt60")
tmp2 = dat %>% filter(category=="2") %>% group_by(decile) %>% count(category,name = "n_ge60")
avg = dat %>% filter() %>% group_by(decile) %>% summarise_at(vars(age),mean) # average days to death per decile - ignore censored values
cnt = data.table(merge(merge(tmp1,tmp2,by=c("decile"),all = T),avg,by="decile"))[,c("decile","n_lt60","n_ge60","age")]
kable(cnt,align = 'c',caption = "Age PSL decile counts")
# calculate hazards ratios
a = cnt[decile%in%c(1),n_1]
fit = lm.age
psl = rowSums(data.matrix(fit$model[,-1]) %*% diag(coef(fit)[-1])) + coef(fit)[1] # multiple each PC by the PC beta, sum across PCs, add the intercept beta
# check PSL calculation
unique(round(fit$fitted.values,10) == round(psl,10))
#data.table(PSL=psl,fitted_values=fit$fitted.values) # view data table
# split into decile
dcl = cut(psl,quantile(psl,c(0,1/10,2/10,3/10,4/10,5/10,6/10,7/10,8/10,9/10,1)),include.lowest = T,labels = F)
dat = data.table(age=fit$model$D_PT_age,psl=psl,decile=dcl)
dat$category = as.factor(if_else(dat$age<60,1,2)) # two categories: <60 or >=60 at diagnosis
# plot distribution
ggplot(dat) + geom_dotplot(aes(x=psl,fill=category),binwidth = 1/2,color="white") + theme_classic()
# count number in each category by decile
tmp1 = dat %>% filter(category=="1") %>% group_by(decile) %>% count(category,name = "n_lt60")
tmp2 = dat %>% filter(category=="2") %>% group_by(decile) %>% count(category,name = "n_ge60")
avg = dat %>% filter() %>% group_by(decile) %>% summarise_at(vars(age),mean) # average days to death per decile - ignore censored values
cnt = data.table(merge(merge(tmp1,tmp2,by=c("decile"),all = T),avg,by="decile"))[,c("decile","n_lt60","n_ge60","age")]
kable(cnt,align = 'c',caption = "Age PSL decile counts")
# calculate hazards ratios
a = cnt[decile%in%c(1),n_lt60]
b = cnt[decile%in%c(1),n_ge60]
c = sum(cnt[decile%in%c(5,6),n_lt60])
d = sum(cnt[decile%in%c(5,6),n_ge60])
hr10 = (a/b)/(c/d)
se10 = sqrt((1/a)+(1/b)+(1/c)+(1/d))
ci10_l = exp(log(hr10)-1.96*se10)
ci10_u = exp(log(hr10)+1.96*se10)
paste0("Odds Ratio: Age PSL in decile 1 compared with deciles 5 + 6 for <60 or >=60 = ",round(hr10,digits = 2)," (",round(ci10_l,digits = 2),"-",round(ci10_u,digits = 2),")")
